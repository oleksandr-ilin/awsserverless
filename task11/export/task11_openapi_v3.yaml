openapi: 3.0.1
x-stoplight:
  id: q87ugdgt30lfk
info:
  title: task11_api
  version: '2024-09-19T22:56:24Z'
  description: Task 11 OpenAPI documentation AWS service
  contact:
    name: Alex ILIN
    email: oleksandr_ilin@epam.com
  license:
    name: ''
servers:
  - url: 'https://h0t2ih92e3.execute-api.eu-central-1.amazonaws.com/{basePath}'
    variables:
      basePath:
        default: api
paths:
  /signup:
    post:
      summary: Creates a new user
      description: SignUp as a new user
      responses:
        '200':
          $ref: '#/components/responses/SimpleResponse'
        '400':
          $ref: '#/components/responses/SimpleResponse'
      requestBody:
        $ref: '#/components/requestBodies/SignUpRequest'
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: 'arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:905418349556:function:api_handler/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
      x-stoplight:
        id: ew3qkopjmwlhz
      operationId: signup-post
    options:
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        type: mock
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
      x-stoplight:
        id: g80xxzcbpeeoz
      operationId: signup-options
  /signin:
    post:
      responses:
        '200':
          $ref: '#/components/responses/SignInResponse'
        '400':
          $ref: '#/components/responses/SimpleResponse'
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: 'arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:905418349556:function:api_handler/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
      x-stoplight:
        id: 5oc8sxwk60ay8
      operationId: signin-post
      summary: SignIn
      description: Execute the Sign In operation to authenticate and authorize the user and get the access token
      requestBody:
        $ref: '#/components/requestBodies/SignInRequest'
    options:
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        type: mock
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
      x-stoplight:
        id: jdg6uljzw7bjg
      operationId: signin-options
  /tables:
    get:
      summary: Lists all tables
      description: Loads all tables from **DynamoDB** and lists it as *json* response
      responses:
        '200':
          $ref: '#/components/responses/TableListResponse'
        '400':
          $ref: '#/components/responses/SimpleResponse'
      security:
        - authorizer: []
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: 'arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:905418349556:function:api_handler/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
      x-stoplight:
        id: 0fy7texqs3k9c
      operationId: tables-get
    post:
      summary: Adds a new table
      description: Adds a new table and store it in the **DynamoDB**
      responses:
        '200':
          $ref: '#/components/responses/NewTableAddedResponse'
        '400':
          $ref: '#/components/responses/SimpleResponse'
      security:
        - authorizer: []
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: 'arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:905418349556:function:api_handler/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
      x-stoplight:
        id: 7q3tm6vylmi0m
      operationId: tables-post
      requestBody:
        $ref: '#/components/requestBodies/NewTableRequest'
    options:
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        type: mock
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
      x-stoplight:
        id: yky7x9ww3hro7
      operationId: tables-options
  '/tables/{tableId}':
    get:
      summary: Shows the table details
      description: Finds the table information by the **table Id**
      parameters:
        - name: tableId
          description: The table number which information you are looking for
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/TableResponse'
        '400':
          $ref: '#/components/responses/SimpleResponse'
      security:
        - authorizer: []
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: 'arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:905418349556:function:api_handler/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
      x-stoplight:
        id: dl1vqgohgecxj
      operationId: tables-byid-get
    options:
      parameters:
        - name: tableId
          description: The table number which information you are looking for
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        type: mock
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
      x-stoplight:
        id: 83rdfe2967cbq
      operationId: tables-byid-options
  /reservations:
    get:
      summary: Lists all reservations
      description: Loads all reservations from **DynamoDB** and lists it as *json* response
      responses:
        '200':
          $ref: '#/components/responses/ReservationListResponse'
        '400':
          $ref: '#/components/responses/SimpleResponse'
      security:
        - authorizer: []
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: 'arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:905418349556:function:api_handler/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
      x-stoplight:
        id: dl37o7b20rmf0
      operationId: reservations-get
    post:
      summary: Add a new reservation
      description: |-
        Adds a new reservation if:
        - requested *table* exists and 
        - it does not overlap other existed reservations for this *table*
      responses:
        '200':
          $ref: '#/components/responses/ReservationResultResponse'
        '400':
          $ref: '#/components/responses/SimpleResponse'
      security:
        - authorizer: []
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: 'arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:905418349556:function:api_handler/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
      x-stoplight:
        id: jm677if92jqgg
      operationId: reservations-post
      requestBody:
        $ref: '#/components/requestBodies/AddNewReservationRequest'
    options:
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        type: mock
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
      x-stoplight:
        id: 845btsk0m29ot
      operationId: reservations-options
components:
  schemas:
    Empty:
      title: Empty Schema
      type: object
      x-stoplight:
        id: pcx5wnu8zy378
    Table:
      type: object
      x-examples:
        Example 1:
          id: 5
          number: 12
          places: 5
          isVip: true
          minOrder: 120
      required:
        - id
        - number
        - places
        - isVip
      properties:
        id:
          type: integer
          example: 25
          minimum: 1
          format: int64
        number:
          type: integer
          minimum: 1
          maximum: 1000
          example: 12
          format: int32
        places:
          type: integer
          format: int32
          example: 5
          minimum: 1
          maximum: 100
        isVip:
          type: boolean
        minOrder:
          type: integer
    Reservation:
      type: object
      x-examples:
        Example 1:
          tableNumber: 12
          clientName: Jim Smith
          phoneNumber: 949 231-3421
          date: '2024-09-20'
          slotTimeStart: '13:00'
          slotTimeEnd: '15:00'
      required:
        - tableNumber
        - clientName
        - phoneNumber
        - date
        - slotTimeStart
        - slotTimeEnd
      properties:
        tableNumber:
          type: integer
          format: int32
          minimum: 1
          example: 12
        clientName:
          type: string
          example: Jim Smith
        phoneNumber:
          type: string
          example: 949 213-3433
        date:
          type: string
          format: date
          example: '2024-09-20'
        slotTimeStart:
          type: string
          example: '3:00'
          pattern: '^[0-2]{0,1}\d:[0-5]\d$'
        slotTimeEnd:
          type: string
          example: '15:00'
          pattern: '^[0-2]{0,1}\d:[0-5]\d$'
  requestBodies:
    SignUpRequest:
      content:
        application/json:
          schema:
            title: SignUpRequest
            type: object
            description: A new user data
            required:
              - firstName
              - lastName
              - email
            properties:
              firstName:
                type: string
                example: Mary
                description: The user First Name
              lastName:
                type: string
                example: Smith
                description: The user Last Name
              email:
                type: string
                example: mary-smith@example.com
                description: The user email which would be used as unique user identifier in the system
              password:
                type: string
                example: testPass34$354545
                description: 'The user password. Should be alphanumeric + any of "$%^*", 12+ chars'
                pattern: '^(?=.*[A-Za-z0-9])(?=.*[$%^*]).{12,}$'
          examples:
            Example 1:
              value:
                firstName: Mary
                lastName: Smith
                email: mary-smith@example.com
                password: testPass34$354545
    SignInRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
                x-stoplight:
                  id: aozm0rg6lzxjk
                format: email
                example: test@email.com
                minLength: 6
              password:
                type: string
                x-stoplight:
                  id: nz0zkbwn2g9up
                pattern: '^(?=.*[A-Za-z0-9])(?=.*[$%^*]).{12,}$'
                example: testPass34$354545
                format: password
                minLength: 12
          examples:
            Example 1:
              value:
                email: test@email.com
                password: testPass34$354545
      description: Used to sign in and receive the acess token
    NewTableRequest:
      content:
        application/json:
          schema:
            type: object
            $ref: '#/components/schemas/Table'
          examples:
            Example 1:
              value:
                id: 25
                number: 12
                places: 5
                isVip: true
                minOrder: 0
      description: New Table Request
    AddNewReservationRequest:
      content:
        application/json:
          schema:
            type: object
            $ref: '#/components/schemas/Reservation'
          examples:
            Example 1:
              value:
                tableNumber: 12
                clientName: Jim Smith
                phoneNumber: 949 213-3433
                date: '2024-09-20'
                slotTimeStart: '3:00'
                slotTimeEnd: '15:00'
      description: New Reservation
  securitySchemes:
    authorizer:
      type: apiKey
      name: Authorization
      in: header
      x-amazon-apigateway-authtype: cognito_user_pools
      x-amazon-apigateway-authorizer:
        type: cognito_user_pools
        providerARNs:
          - 'arn:aws:cognito-idp:eu-central-1:905418349556:userpool/eu-central-1_OpkgurZJc'
  responses:
    SignInResponse:
      description: The access token
      content:
        application/json:
          schema:
            type: object
            properties:
              accessToken:
                type: string
            x-examples:
              Example 1:
                accessToken: jwt-token
          examples:
            Example 1:
              value:
                accessToken: // string
    SimpleResponse:
      description: |-
        {
            "message": "Some result details"
        }
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
            x-examples:
              Example 1:
                message: Some message
    TableListResponse:
      description: List of available tables
      content:
        application/json:
          schema:
            type: object
            properties:
              tables:
                x-stoplight:
                  id: vilmhcknr2ybb
                type: array
                items:
                  $ref: '#/components/schemas/Table'
          examples:
            Example 1:
              value:
                tables:
                  - id: 25
                    number: 12
                    places: 5
                    isVip: true
                    minOrder: 0
    TableResponse:
      description: Table details
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Table'
          examples:
            Example 1:
              value:
                id: 25
                number: 12
                places: 5
                isVip: true
                minOrder: 0
    NewTableAddedResponse:
      description: New Table info
      content:
        application/json:
          schema:
            type: object
            example:
              id: 24
            properties:
              id:
                type: integer
                format: int64
          examples: {}
    ReservationResultResponse:
      description: Just added reservation
      content:
        application/json:
          schema:
            type: object
            properties:
              reservationId:
                type: string
                x-stoplight:
                  id: 9pvvbhlxi1viq
          examples:
            Example 1:
              value:
                reservationId: string
    ReservationListResponse:
      description: List of reservations
      content:
        application/json:
          schema:
            type: object
            properties:
              reservations:
                x-stoplight:
                  id: 1xb6utzgl99kg
                type: array
                items:
                  $ref: '#/components/schemas/Reservation'
tags:
  - name: task11
